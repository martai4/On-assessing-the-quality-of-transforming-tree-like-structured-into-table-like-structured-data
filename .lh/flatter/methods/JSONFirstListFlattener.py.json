{
    "sourceFile": "flatter/methods/JSONFirstListFlattener.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1717948099426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717948104719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,11 @@\n         self.server.do_put(flat_data)\r\n \r\n     def load_json_from_file(self, file_paths: list) -> None:\r\n         flattened_data = {}\r\n-        print(fil)\r\n+        print(file_paths)\r\n         for path in file_paths:\r\n+            pt\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n             flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n"
                },
                {
                    "date": 1717948110584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     def load_json_from_file(self, file_paths: list) -> None:\r\n         flattened_data = {}\r\n         print(file_paths)\r\n         for path in file_paths:\r\n-            pt\r\n+            print(pat)\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n             flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n"
                },
                {
                    "date": 1717948123477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import pyarrow as pa\r\n+import pandas as pd\r\n+import json, os\r\n+\r\n+from FlightServer import FlightServer\r\n+\r\n+class JSONFirstListFlattener:\r\n+    def __init__(self) -> None:\r\n+        self.server = None\r\n+\r\n+    def serve(self, server_port: int, file_paths=None) -> None:\r\n+        self.server = FlightServer(server_port)\r\n+        self.load_json_from_file(file_paths) if file_paths else None\r\n+        self.server.serve()\r\n+\r\n+    def do_put(self, dataset_name: str, json) -> None:\r\n+        flat_data = {f\"FlattenedFirstJSON_{dataset_name}\": self.flatten_json(json)}\r\n+        self.server.do_put(flat_data)\r\n+\r\n+    def load_json_from_file(self, file_paths: list) -> None:\r\n+        flattened_data = {}\r\n+        print(file_paths)\r\n+        for path in file_paths:\r\n+            print(path, os.path.basename(path))\r\n+            json_data = json.load(open(path, encoding='utf-8'))\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n+\r\n+        self.server.do_put(flattened_data)\r\n+\r\n+    def flatten_json(self, json) -> pa.Table:\r\n+        return pa.Table.from_pandas(pd.json_normalize(json))\r\n"
                },
                {
                    "date": 1717948215692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,43 +20,12 @@\n     def load_json_from_file(self, file_paths: list) -> None:\r\n         flattened_data = {}\r\n         print(file_paths)\r\n         for path in file_paths:\r\n-            print(path, os.path.basename(path))\r\n+            print(path, os.path.basename())\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n             flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json) -> pa.Table:\r\n         return pa.Table.from_pandas(pd.json_normalize(json))\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-import json, os\r\n-\r\n-from FlightServer import FlightServer\r\n-\r\n-class JSONFirstListFlattener:\r\n-    def __init__(self) -> None:\r\n-        self.server = None\r\n-\r\n-    def serve(self, server_port: int, file_paths=None) -> None:\r\n-        self.server = FlightServer(server_port)\r\n-        self.load_json_from_file(file_paths) if file_paths else None\r\n-        self.server.serve()\r\n-\r\n-    def do_put(self, dataset_name: str, json) -> None:\r\n-        flat_data = {f\"FlattenedFirstJSON_{dataset_name}\": self.flatten_json(json)}\r\n-        self.server.do_put(flat_data)\r\n-\r\n-    def load_json_from_file(self, file_paths: list) -> None:\r\n-        flattened_data = {}\r\n-        print(file_paths)\r\n-        for path in file_paths:\r\n-            print(pat)\r\n-            json_data = json.load(open(path, encoding='utf-8'))\r\n-            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n-\r\n-        self.server.do_put(flattened_data)\r\n-\r\n-    def flatten_json(self, json) -> pa.Table:\r\n-        return pa.Table.from_pandas(pd.json_normalize(json))\r\n"
                },
                {
                    "date": 1717948388439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         print(file_paths)\r\n         for path in file_paths:\r\n             print(path, os.path.basename())\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n-            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json) -> pa.Table:\r\n"
                },
                {
                    "date": 1717948396593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         print(file_paths)\r\n         for path in file_paths:\r\n             print(path, os.path.basename())\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n-            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).}\"] = self.flatten_json(json_data)\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.json')}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json) -> pa.Table:\r\n"
                },
                {
                    "date": 1717948428978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n     def load_json_from_file(self, file_paths: list) -> None:\r\n         flattened_data = {}\r\n         print(file_paths)\r\n         for path in file_paths:\r\n-            print(path, os.path.basename())\r\n+            print(path, os.path.basename(path).split('.json')[0])\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n-            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.json')}\"] = self.flatten_json(json_data)\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.json')[0]}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json) -> pa.Table:\r\n"
                },
                {
                    "date": 1717948474947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         print(file_paths)\r\n         for path in file_paths:\r\n             print(path, os.path.basename(path).split('.json')[0])\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n-            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.json')[0]}\"] = self.flatten_json(json_data)\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.')[0]}\"] = self.flatten_json(json_data)\r\n \r\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json) -> pa.Table:\r\n"
                },
                {
                    "date": 1717948500827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import pyarrow as pa\r\n+import pandas as pd\r\n+import json, os\r\n+\r\n+from FlightServer import FlightServer\r\n+\r\n+class JSONFirstListFlattener:\r\n+    def __init__(self) -> None:\r\n+        self.server = None\r\n+\r\n+    def serve(self, server_port: int, file_paths=None) -> None:\r\n+        self.server = FlightServer(server_port)\r\n+        self.load_json_from_file(file_paths) if file_paths else None\r\n+        self.server.serve()\r\n+\r\n+    def do_put(self, dataset_name: str, json) -> None:\r\n+        flat_data = {f\"FlattenedFirstJSON_{dataset_name}\": self.flatten_json(json)}\r\n+        self.server.do_put(flat_data)\r\n+\r\n+    def load_json_from_file(self, file_paths: list) -> None:\r\n+        flattened_data = {}\r\n+        print(file_paths)\r\n+        for path in file_paths:\r\n+            print(path, os.path.basename(path).split('.')[0])\r\n+            json_data = json.load(open(path, encoding='utf-8'))\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.')[0]}\"] = self.flatten_json(json_data)\r\n+\r\n+        self.server.do_put(flattened_data)\r\n+\r\n+    def flatten_json(self, json) -> pa.Table:\r\n+        return pa.Table.from_pandas(pd.json_normalize(json))\r\n"
                },
                {
                    "date": 1717948662084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import pyarrow as pa\r\n+import pandas as pd\r\n+import json, os\r\n+\r\n+from FlightServer import FlightServer\r\n+\r\n+class JSONFirstListFlattener:\r\n+    def __init__(self) -> None:\r\n+        self.server = None\r\n+\r\n+    def serve(self, server_port: int, file_paths=None) -> None:\r\n+        self.server = FlightServer(server_port)\r\n+        self.load_json_from_file(file_paths) if file_paths else None\r\n+        self.server.serve()\r\n+\r\n+    def do_put(self, dataset_name: str, json) -> None:\r\n+        flat_data = {f\"FlattenedFirstJSON_{dataset_name}\": self.flatten_json(json)}\r\n+        self.server.do_put(flat_data)\r\n+\r\n+    def load_json_from_file(self, file_paths: list) -> None:\r\n+        flattened_data = {}\r\n+        print(file_paths)\r\n+        for path in file_paths:\r\n+            json_data = json.load(open(path, encoding='utf-8'))\r\n+            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path).split('.')[0]}\"] = self.flatten_json(json_data)\r\n+\r\n+        self.server.do_put(flattened_data)\r\n+\r\n+    def flatten_json(self, json) -> pa.Table:\r\n+        return pa.Table.from_pandas(pd.json_normalize(json))\r\n"
                }
            ],
            "date": 1717948099426,
            "name": "Commit-0",
            "content": "import pyarrow as pa\r\nimport pandas as pd\r\nimport json, os\r\n\r\nfrom FlightServer import FlightServer\r\n\r\nclass JSONFirstListFlattener:\r\n    def __init__(self) -> None:\r\n        self.server = None\r\n\r\n    def serve(self, server_port: int, file_paths=None) -> None:\r\n        self.server = FlightServer(server_port)\r\n        self.load_json_from_file(file_paths) if file_paths else None\r\n        self.server.serve()\r\n\r\n    def do_put(self, dataset_name: str, json) -> None:\r\n        flat_data = {f\"FlattenedFirstJSON_{dataset_name}\": self.flatten_json(json)}\r\n        self.server.do_put(flat_data)\r\n\r\n    def load_json_from_file(self, file_paths: list) -> None:\r\n        flattened_data = {}\r\n        print(fil)\r\n        for path in file_paths:\r\n            json_data = json.load(open(path, encoding='utf-8'))\r\n            flattened_data[f\"FlattenedFirstJSON_{os.path.basename(path)}\"] = self.flatten_json(json_data)\r\n\r\n        self.server.do_put(flattened_data)\r\n\r\n    def flatten_json(self, json) -> pa.Table:\r\n        return pa.Table.from_pandas(pd.json_normalize(json))\r\n"
        }
    ]
}