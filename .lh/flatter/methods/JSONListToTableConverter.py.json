{
    "sourceFile": "flatter/methods/JSONListToTableConverter.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1717948710996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717948733106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json, dataset_name) -> pa.Table:\r\n         return self.convert_lists_to_tables(json, dataset_name)\r\n-\r\n+{os.path.basename(path).split('.')[0]}\r\n  # --------------------------------------------------------------------------------------------------\r\n \r\n     def convert_lists_to_tables(self, json, dataset_name: str, table_name='') -> pa.Table:\r\n         dataframe = pd.json_normalize(json)\r\n@@ -42,9 +42,9 @@\n             dataframe = dataframe.drop(columns=list_columns)\r\n             dataframe['row_number'] = range(1, len(dataframe) + 1)\r\n \r\n         main_table = pa.Table.from_pandas(dataframe)\r\n-        tables = {f\"TablesMethod_{os.path.basename(path).split('.')[0]}{'_' if table_name != '' else ''}{table_name}\": main_table}\r\n+        tables = {f\"TablesMethod_{dataset_name}{'_' if table_name != '' else ''}{table_name}\": main_table}\r\n \r\n         for dropped_list_column in list_columns:\r\n             new_json = self.create_json_from_list(list_dataframe, dropped_list_column)\r\n             tables.update(self.convert_lists_to_tables(new_json, dataset_name, dropped_list_column))\r\n"
                },
                {
                    "date": 1717948744203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     def load_json_from_file(self, file_paths: list) -> None:\r\n         results = []\r\n         for path in file_paths:\r\n             json_data = json.load(open(path, encoding='utf-8'))\r\n-            tables = self.convert_lists_to_tables(json_data, os.path.basename(path))\r\n+            tables = self.convert_lists_to_tables(json_data, os.path.basename(path).split('.')[0])\r\n             results.append(tables)\r\n \r\n         flattened_data = {k: v for tables in results for k, v in tables.items()}\r\n         self.server.do_put(flattened_data)\r\n"
                },
                {
                    "date": 1717948749230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n         self.server.do_put(flattened_data)\r\n \r\n     def flatten_json(self, json, dataset_name) -> pa.Table:\r\n         return self.convert_lists_to_tables(json, dataset_name)\r\n-{os.path.basename(path).split('.')[0]}\r\n  # --------------------------------------------------------------------------------------------------\r\n \r\n     def convert_lists_to_tables(self, json, dataset_name: str, table_name='') -> pa.Table:\r\n         dataframe = pd.json_normalize(json)\r\n"
                }
            ],
            "date": 1717948710996,
            "name": "Commit-0",
            "content": "import pyarrow as pa\r\nimport pandas as pd\r\nimport json, os\r\nfrom typing import Union\r\n\r\nfrom FlightServer import FlightServer\r\n\r\nclass JSONListToTableConverter:\r\n    def __init__(self) -> None:\r\n        self.server = None\r\n\r\n    def serve(self, server_port: int, file_paths=None) -> None:\r\n        self.server = FlightServer(server_port)\r\n        self.load_json_from_file(file_paths) if file_paths else None\r\n        self.server.serve()\r\n\r\n    def do_put(self, dataset_name: str, json) -> None:\r\n        flat_data = self.flatten_json(json, dataset_name)\r\n        self.server.do_put(flat_data)\r\n\r\n    def load_json_from_file(self, file_paths: list) -> None:\r\n        results = []\r\n        for path in file_paths:\r\n            json_data = json.load(open(path, encoding='utf-8'))\r\n            tables = self.convert_lists_to_tables(json_data, os.path.basename(path))\r\n            results.append(tables)\r\n\r\n        flattened_data = {k: v for tables in results for k, v in tables.items()}\r\n        self.server.do_put(flattened_data)\r\n\r\n    def flatten_json(self, json, dataset_name) -> pa.Table:\r\n        return self.convert_lists_to_tables(json, dataset_name)\r\n\r\n # --------------------------------------------------------------------------------------------------\r\n\r\n    def convert_lists_to_tables(self, json, dataset_name: str, table_name='') -> pa.Table:\r\n        dataframe = pd.json_normalize(json)\r\n        list_columns = dataframe.applymap(lambda x: isinstance(x, list)).any().loc[lambda x: x].index.tolist()\r\n\r\n        if list_columns:\r\n            list_dataframe = dataframe[list_columns].copy()\r\n            dataframe = dataframe.drop(columns=list_columns)\r\n            dataframe['row_number'] = range(1, len(dataframe) + 1)\r\n\r\n        main_table = pa.Table.from_pandas(dataframe)\r\n        tables = {f\"TablesMethod_{os.path.basename(path).split('.')[0]}{'_' if table_name != '' else ''}{table_name}\": main_table}\r\n\r\n        for dropped_list_column in list_columns:\r\n            new_json = self.create_json_from_list(list_dataframe, dropped_list_column)\r\n            tables.update(self.convert_lists_to_tables(new_json, dataset_name, dropped_list_column))\r\n\r\n        return tables\r\n\r\n    def create_json_from_list(self, list_data, table_name) -> Union[list, dict]:\r\n        json_data = []\r\n        for row_number, item in enumerate(list_data[table_name]):\r\n            if isinstance(item, list):\r\n                for element in item or [None]:\r\n                    json_data.append({\"row_number\": row_number, \"value\": element})\r\n            elif item is not None:\r\n                json_data.append({\"row_number\": row_number, \"value\": item})\r\n\r\n        return json_data\r\n\r\n"
        }
    ]
}