{
    "sourceFile": "flatter/client.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1717350019290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717350113205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_nam\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    genres_column = data['genres']\r\n+    first_genres  = [row[0] if row else None for row in genres_column]\r\n+    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    grouped_table = first_genre_table.group_by('first_genre')\r\n+    print(grouped_table)\r\n+\r\n+    genres_column = data['genres']\r\n+    genres_0 = [row[0] if row else None for row in genres_column]\r\n+    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    print(grouped_table)\r\n+\r\n+    cast_column = data['cast']\r\n+    first_cast  = [row[0] if row else None for row in cast_column]\r\n+    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    grouped_table = first_cast_table.group_by('first_cast')\r\n+    print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    print(grouped_table)\r\n+\r\n+    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    # client_reddit()\r\n+    client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350153223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    genres_column = data['genres']\r\n+    first_genres  = [row[0] if row else None for row in genres_column]\r\n+    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    grouped_table = first_genre_table.group_by('first_genre')\r\n+    print(grouped_table)\r\n+\r\n+    genres_column = data['genres']\r\n+    genres_0 = [row[0] if row else None for row in genres_column]\r\n+    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    print(grouped_table)\r\n+\r\n+    cast_column = data['cast']\r\n+    first_cast  = [row[0] if row else None for row in cast_column]\r\n+    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    grouped_table = first_cast_table.group_by('first_cast')\r\n+    print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    print(grouped_table)\r\n+\r\n+    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    # client_reddit()\r\n+    client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350355047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    genres_column = data['genres']\r\n+    first_genres  = [row[0] if row else None for row in genres_column]\r\n+    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    grouped_table = first_genre_table.group_by('first_genre')\r\n+    print(grouped_table)\r\n+\r\n+    genres_column = data['genres']\r\n+    genres_0 = [row[0] if row else None for row in genres_column]\r\n+    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    print(grouped_table)\r\n+\r\n+    cast_column = data['cast']\r\n+    first_cast  = [row[0] if row else None for row in cast_column]\r\n+    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    grouped_table = first_cast_table.group_by('first_cast')\r\n+    print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    print(grouped_table)\r\n+\r\n+    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    # client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350423004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    genres_column = data['genres']\r\n+    first_genres  = [row[0] if row else None for row in genres_column]\r\n+    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    grouped_table = first_genre_table.group_by('first_genre')\r\n+    print(grouped_table)\r\n+\r\n+    genres_column = data['genres']\r\n+    genres_0 = [row[0] if row else None for row in genres_column]\r\n+    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    print(grouped_table)\r\n+\r\n+    cast_column = data['cast']\r\n+    first_cast  = [row[0] if row else None for row in cast_column]\r\n+    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    grouped_table = first_cast_table.group_by('first_cast')\r\n+    print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    print(grouped_table)\r\n+\r\n+    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350431883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,28 +184,28 @@\n     # # #SORT DESC\r\n     # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n \r\n     # #GROUP BY\r\n-    print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n \r\n-    genres_column = data['genres']\r\n-    first_genres  = [row[0] if row else None for row in genres_column]\r\n-    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    grouped_table = first_genre_table.group_by('first_genre')\r\n-    print(grouped_table)\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n \r\n-    genres_column = data['genres']\r\n-    genres_0 = [row[0] if row else None for row in genres_column]\r\n-    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    print(grouped_table)\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n \r\n-    cast_column = data['cast']\r\n-    first_cast  = [row[0] if row else None for row in cast_column]\r\n-    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    grouped_table = first_cast_table.group_by('first_cast')\r\n-    print(grouped_table)\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n \r\n     # #AGGREGATE FUNCTION\r\n     # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n     # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n"
                },
                {
                    "date": 1717350439477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    print(grouped_table)\r\n+\r\n+    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350464878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350474314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350493511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350499865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+    # # ### high level of nulls - last element of list\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 59:\r\n+            tenth_elements.append(row[58])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+\r\n+    # # # FILTRES\r\n+    print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350511103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,235 +173,10 @@\n             tenth_elements.append(None)\r\n     tenth_elements_column = pa.array(tenth_elements)\r\n     new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n-    print(new_table.select(['cast']))\r\n-\r\n-    # # # FILTRES\r\n-    print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    # genres_column = data['genres']\r\n-    # first_genres  = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre')\r\n-    # print(grouped_table)\r\n-\r\n-    # genres_column = data['genres']\r\n-    # genres_0 = [row[0] if row else None for row in genres_column]\r\n-    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    # print(grouped_table)\r\n-\r\n-    # cast_column = data['cast']\r\n-    # first_cast  = [row[0] if row else None for row in cast_column]\r\n-    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    # grouped_table = first_cast_table.group_by('first_cast')\r\n-    # print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    # print(grouped_table)\r\n-\r\n-    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # SELECTION\r\n-    # first level query\r\n-    ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n     # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n     # # # # FILTRES\r\n     # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n \r\n     # # # #SORT\r\n@@ -446,1805 +221,5 @@\n     # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n \r\n if __name__ == '__main__':\r\n     client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    # genres_column = data['genres']\r\n-    # first_genres  = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre')\r\n-    # print(grouped_table)\r\n-\r\n-    # genres_column = data['genres']\r\n-    # genres_0 = [row[0] if row else None for row in genres_column]\r\n-    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    # print(grouped_table)\r\n-\r\n-    # cast_column = data['cast']\r\n-    # first_cast  = [row[0] if row else None for row in cast_column]\r\n-    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    # grouped_table = first_cast_table.group_by('first_cast')\r\n-    # print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    # print(grouped_table)\r\n-\r\n-    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    # genres_column = data['genres']\r\n-    # first_genres  = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre')\r\n-    # print(grouped_table)\r\n-\r\n-    # genres_column = data['genres']\r\n-    # genres_0 = [row[0] if row else None for row in genres_column]\r\n-    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    # print(grouped_table)\r\n-\r\n-    # cast_column = data['cast']\r\n-    # first_cast  = [row[0] if row else None for row in cast_column]\r\n-    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    # grouped_table = first_cast_table.group_by('first_cast')\r\n-    # print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    # print(grouped_table)\r\n-\r\n-    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    # genres_column = data['genres']\r\n-    # first_genres  = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre')\r\n-    # print(grouped_table)\r\n-\r\n-    # genres_column = data['genres']\r\n-    # genres_0 = [row[0] if row else None for row in genres_column]\r\n-    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    # print(grouped_table)\r\n-\r\n-    # cast_column = data['cast']\r\n-    # first_cast  = [row[0] if row else None for row in cast_column]\r\n-    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    # grouped_table = first_cast_table.group_by('first_cast')\r\n-    # print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    print(grouped_table)\r\n-\r\n-    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    # genres_column = data['genres']\r\n-    # first_genres  = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre')\r\n-    # print(grouped_table)\r\n-\r\n-    # genres_column = data['genres']\r\n-    # genres_0 = [row[0] if row else None for row in genres_column]\r\n-    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    # print(grouped_table)\r\n-\r\n-    # cast_column = data['cast']\r\n-    # first_cast  = [row[0] if row else None for row in cast_column]\r\n-    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    # grouped_table = first_cast_table.group_by('first_cast')\r\n-    # print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    print(grouped_table)\r\n-\r\n-    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    genres_column = data['genres']\r\n-    first_genres  = [row[0] if row else None for row in genres_column]\r\n-    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    grouped_table = first_genre_table.group_by('first_genre')\r\n-    print(grouped_table)\r\n-\r\n-    genres_column = data['genres']\r\n-    genres_0 = [row[0] if row else None for row in genres_column]\r\n-    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    print(grouped_table)\r\n-\r\n-    cast_column = data['cast']\r\n-    first_cast  = [row[0] if row else None for row in cast_column]\r\n-    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    grouped_table = first_cast_table.group_by('first_cast')\r\n-    print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    print(grouped_table)\r\n-\r\n-    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    # client_reddit()\r\n-    # client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    genres_column = data['genres']\r\n-    first_genres  = [row[0] if row else None for row in genres_column]\r\n-    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    grouped_table = first_genre_table.group_by('first_genre')\r\n-    print(grouped_table)\r\n-\r\n-    genres_column = data['genres']\r\n-    genres_0 = [row[0] if row else None for row in genres_column]\r\n-    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    print(grouped_table)\r\n-\r\n-    cast_column = data['cast']\r\n-    first_cast  = [row[0] if row else None for row in cast_column]\r\n-    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    grouped_table = first_cast_table.group_by('first_cast')\r\n-    print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    print(grouped_table)\r\n-\r\n-    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    # client_reddit()\r\n-    client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_nam\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    genres_column = data['genres']\r\n-    first_genres  = [row[0] if row else None for row in genres_column]\r\n-    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    grouped_table = first_genre_table.group_by('first_genre')\r\n-    print(grouped_table)\r\n-\r\n-    genres_column = data['genres']\r\n-    genres_0 = [row[0] if row else None for row in genres_column]\r\n-    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    print(grouped_table)\r\n-\r\n-    cast_column = data['cast']\r\n-    first_cast  = [row[0] if row else None for row in cast_column]\r\n-    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    grouped_table = first_cast_table.group_by('first_cast')\r\n-    print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    print(grouped_table)\r\n-\r\n-    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    # client_reddit()\r\n-    client_example()\n-import pyarrow.flight as flight\r\n-import pyarrow.compute as pc\r\n-import pyarrow as pa\r\n-import pandas as pd\r\n-\r\n-def client_example():\r\n-    ports = [50051, 50052, 50053, 50054]\r\n-    for port in ports:\r\n-        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n-        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n-\r\n-        for table_name in table_names:\r\n-            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-            data = reader.read_all()\r\n-            print(f\"Data from table {port}:: '{table_name}':\")\r\n-            # print(data)\r\n-#Movies\r\n-def client_reddit():\r\n-    # port = 50051\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-\r\n-    # table_name = 'FlattenedJSON_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast[0]']))\r\n-    # ### medium level of nulls\r\n-    # print(data.select(['cast[9]']))\r\n-    # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast[58]']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres[0]'))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n-    # print(pa.TableGroupBy(data,'cast[0]'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n-\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n-    #     print(genre)\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # print(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50054\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'SimpleMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-    \r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # ## object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # print(data.select(['cast_0']))\r\n-    # # ### medium level of nulls\r\n-    # print(data.select(['cast_9']))\r\n-    # # ### high level of nulls - last element of list\r\n-    # print(data.select(['cast_58']))\r\n-\r\n-    # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    # print(pa.TableGroupBy(data,'year'))\r\n-    # print(pa.TableGroupBy(data,'genres_0'))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n-    # print(pa.TableGroupBy(data,'cast_0'))\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-\r\n-    # combined_df = []\r\n-    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n-    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n-    #     combined_df.append(df_genre)\r\n-    \r\n-    # combined_df = pa.concat_tables(combined_df)\r\n-    # combined_df = combined_df.combine_chunks()\r\n-    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n-\r\n-    # port = 50053\r\n-    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    # table_name = 'TablesMethod_movies'\r\n-    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    # data = reader.read_all()\r\n-\r\n-    port = 50052\r\n-    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n-    table_name = 'FlattenedJSON_movies'\r\n-    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n-    data = reader.read_all()\r\n-\r\n-    # # SELECTION\r\n-    # # first level query\r\n-    # ## to string\r\n-    # print(data.select(['title']))\r\n-    # ## to int\r\n-    # print(data.select(['year']))\r\n-    # # object from list \r\n-    # ### low level of nulls - first element of list\r\n-    # cast_column=data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # first_elements = []\r\n-    # for row in cast_list:\r\n-    #     if row:  # Check if the list is not empty\r\n-    #         first_elements.append(row[0])\r\n-    #     else:\r\n-    #         first_elements.append(None)\r\n-    # first_elements_column = pa.array(first_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### medium level of nulls\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 10:\r\n-    #         tenth_elements.append(row[9])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-    # # # ### high level of nulls - last element of list\r\n-    # cast_column = data['cast']\r\n-    # cast_list = cast_column.to_pylist()\r\n-    # tenth_elements = []\r\n-    # for row in cast_list:\r\n-    #     if len(row) >= 59:\r\n-    #         tenth_elements.append(row[58])\r\n-    #     else:\r\n-    #         tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n-    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n-\r\n-    # print(new_table.select(['cast']))\r\n-\r\n-    # # # # FILTRES\r\n-    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n-\r\n-    # # # #SORT\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # # #SORT DESC\r\n-    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n-\r\n-    # #GROUP BY\r\n-    print(pa.TableGroupBy(data,'year'))\r\n-\r\n-    genres_column = data['genres']\r\n-    first_genres  = [row[0] if row else None for row in genres_column]\r\n-    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    grouped_table = first_genre_table.group_by('first_genre')\r\n-    print(grouped_table)\r\n-\r\n-    genres_column = data['genres']\r\n-    genres_0 = [row[0] if row else None for row in genres_column]\r\n-    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n-    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n-    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n-    print(grouped_table)\r\n-\r\n-    cast_column = data['cast']\r\n-    first_cast  = [row[0] if row else None for row in cast_column]\r\n-    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n-    grouped_table = first_cast_table.group_by('first_cast')\r\n-    print(grouped_table)\r\n-\r\n-    # #AGGREGATE FUNCTION\r\n-    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n-    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n-    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n-    # genres_column = data['genres']\r\n-    # first_genres = [row[0] if row else None for row in genres_column]\r\n-    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n-    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n-    #     count=pc.count,\r\n-    # )\r\n-    print(grouped_table)\r\n-\r\n-    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n-\r\n-if __name__ == '__main__':\r\n-    # client_reddit()\r\n     # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350516536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+    # # ### high level of nulls - last element of list\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 59:\r\n+            tenth_elements.append(row[58])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350522732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+    # # ### high level of nulls - last element of list\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 59:\r\n+            tenth_elements.append(row[58])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350545211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 10:\r\n+            tenth_elements.append(row[9])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+    # # ### high level of nulls - last element of list\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 59:\r\n+            tenth_elements.append(row[58])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350552179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         if len(row) >= 59:\r\n             tenth_elements.append(row[58])\r\n         else:\r\n             tenth_elements.append(None)\r\n-    tenth_elements_column = pa.array(tenth_elements)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n     # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n     # print(new_table.select(['cast']))\r\n \r\n"
                },
                {
                    "date": 1717350562962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         if len(row) >= 59:\r\n             tenth_elements.append(row[58])\r\n         else:\r\n             tenth_elements.append(None)\r\n-    # tenth_elements_column = pa.array(tenth_elements)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n     # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n     # print(new_table.select(['cast']))\r\n \r\n"
                },
                {
                    "date": 1717350589467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 10:\r\n+            tenth_elements.append(row[9])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+    # # ### high level of nulls - last element of list\r\n+    cast_column = data['cast']\r\n+    cast_list = cast_column.to_pylist()\r\n+    tenth_elements = []\r\n+    for row in cast_list:\r\n+        if len(row) >= 59:\r\n+            tenth_elements.append(row[58])\r\n+        else:\r\n+            tenth_elements.append(None)\r\n+    tenth_elements_column = pa.array(tenth_elements)\r\n+    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    # genres_column = data['genres']\r\n+    # first_genres  = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre')\r\n+    # print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717350603454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,33 +149,33 @@\n     # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n \r\n     # print(new_table.select(['cast']))\r\n     # # # ### medium level of nulls\r\n-    cast_column = data['cast']\r\n-    cast_list = cast_column.to_pylist()\r\n-    tenth_elements = []\r\n-    for row in cast_list:\r\n-        if len(row) >= 10:\r\n-            tenth_elements.append(row[9])\r\n-        else:\r\n-            tenth_elements.append(None)\r\n-    tenth_elements_column = pa.array(tenth_elements)\r\n-    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n-    print(new_table.select(['cast']))\r\n-    # # ### high level of nulls - last element of list\r\n-    cast_column = data['cast']\r\n-    cast_list = cast_column.to_pylist()\r\n-    tenth_elements = []\r\n-    for row in cast_list:\r\n-        if len(row) >= 59:\r\n-            tenth_elements.append(row[58])\r\n-        else:\r\n-            tenth_elements.append(None)\r\n-    tenth_elements_column = pa.array(tenth_elements)\r\n-    new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n-    print(new_table.select(['cast']))\r\n+    # print(new_table.select(['cast']))\r\n \r\n     # # # # FILTRES\r\n     # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n \r\n"
                },
                {
                    "date": 1717350620061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,18 +175,18 @@\n     # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n \r\n     # print(new_table.select(['cast']))\r\n \r\n-    # # # FILTRES\r\n-    print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n \r\n-    # # #SORT\r\n-    print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n-    # #SORT DESC\r\n-    print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n \r\n-    #GROUP BY\r\n-    print(pa.TableGroupBy(data,'year'))\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n \r\n     # genres_column = data['genres']\r\n     # first_genres  = [row[0] if row else None for row in genres_column]\r\n     # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n"
                },
                {
                    "date": 1717350628984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import pyarrow.flight as flight\r\n+import pyarrow.compute as pc\r\n+import pyarrow as pa\r\n+import pandas as pd\r\n+\r\n+def client_example():\r\n+    ports = [50051, 50052, 50053, 50054]\r\n+    for port in ports:\r\n+        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n+        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n+\r\n+        for table_name in table_names:\r\n+            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+            data = reader.read_all()\r\n+            print(f\"Data from table {port}:: '{table_name}':\")\r\n+            # print(data)\r\n+#Movies\r\n+def client_reddit():\r\n+    # port = 50051\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+\r\n+    # table_name = 'FlattenedJSON_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast[0]']))\r\n+    # ### medium level of nulls\r\n+    # print(data.select(['cast[9]']))\r\n+    # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast[58]']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres[0]'))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n+    # print(pa.TableGroupBy(data,'cast[0]'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n+\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n+    #     print(genre)\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # print(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50054\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'SimpleMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+    \r\n+    # # SELECTION\r\n+    # # first level query\r\n+    # ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # ## object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # print(data.select(['cast_0']))\r\n+    # # ### medium level of nulls\r\n+    # print(data.select(['cast_9']))\r\n+    # # ### high level of nulls - last element of list\r\n+    # print(data.select(['cast_58']))\r\n+\r\n+    # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+    # print(pa.TableGroupBy(data,'genres_0'))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n+    # print(pa.TableGroupBy(data,'cast_0'))\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+\r\n+    # combined_df = []\r\n+    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n+    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n+    #     combined_df.append(df_genre)\r\n+    \r\n+    # combined_df = pa.concat_tables(combined_df)\r\n+    # combined_df = combined_df.combine_chunks()\r\n+    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n+\r\n+    # port = 50053\r\n+    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    # table_name = 'TablesMethod_movies'\r\n+    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    # data = reader.read_all()\r\n+\r\n+    port = 50052\r\n+    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n+    table_name = 'FlattenedJSON_movies'\r\n+    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n+    data = reader.read_all()\r\n+\r\n+    # SELECTION\r\n+    # first level query\r\n+    ## to string\r\n+    # print(data.select(['title']))\r\n+    # ## to int\r\n+    # print(data.select(['year']))\r\n+    # # object from list \r\n+    # ### low level of nulls - first element of list\r\n+    # cast_column=data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # first_elements = []\r\n+    # for row in cast_list:\r\n+    #     if row:  # Check if the list is not empty\r\n+    #         first_elements.append(row[0])\r\n+    #     else:\r\n+    #         first_elements.append(None)\r\n+    # first_elements_column = pa.array(first_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### medium level of nulls\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 10:\r\n+    #         tenth_elements.append(row[9])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+    # # # ### high level of nulls - last element of list\r\n+    # cast_column = data['cast']\r\n+    # cast_list = cast_column.to_pylist()\r\n+    # tenth_elements = []\r\n+    # for row in cast_list:\r\n+    #     if len(row) >= 59:\r\n+    #         tenth_elements.append(row[58])\r\n+    #     else:\r\n+    #         tenth_elements.append(None)\r\n+    # tenth_elements_column = pa.array(tenth_elements)\r\n+    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n+\r\n+    # print(new_table.select(['cast']))\r\n+\r\n+    # # # # FILTRES\r\n+    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n+\r\n+    # # # #SORT\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n+    # # #SORT DESC\r\n+    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n+\r\n+    # #GROUP BY\r\n+    # print(pa.TableGroupBy(data,'year'))\r\n+\r\n+    genres_column = data['genres']\r\n+    first_genres  = [row[0] if row else None for row in genres_column]\r\n+    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    grouped_table = first_genre_table.group_by('first_genre')\r\n+    print(grouped_table)\r\n+\r\n+    # genres_column = data['genres']\r\n+    # genres_0 = [row[0] if row else None for row in genres_column]\r\n+    # genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n+    # group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n+    # grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n+    # print(grouped_table)\r\n+\r\n+    # cast_column = data['cast']\r\n+    # first_cast  = [row[0] if row else None for row in cast_column]\r\n+    # first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n+    # grouped_table = first_cast_table.group_by('first_cast')\r\n+    # print(grouped_table)\r\n+\r\n+    # #AGGREGATE FUNCTION\r\n+    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n+    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n+    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n+    # genres_column = data['genres']\r\n+    # first_genres = [row[0] if row else None for row in genres_column]\r\n+    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n+    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n+    #     count=pc.count,\r\n+    # )\r\n+    # print(grouped_table)\r\n+\r\n+    # print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n+\r\n+if __name__ == '__main__':\r\n+    client_reddit()\r\n+    # client_example()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1717350019290,
            "name": "Commit-0",
            "content": "import pyarrow.flight as flight\r\nimport pyarrow.compute as pc\r\nimport pyarrow as pa\r\nimport pandas as pd\r\n\r\ndef client_example():\r\n    ports = [50051, 50052, 50053, 50054]\r\n    for port in ports:\r\n        client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n        reader = client.do_get(flight.Ticket(\"get_table_names\".encode())) \r\n        table_names = reader.read_all().to_pandas()[\"table_name\"].tolist()\r\n\r\n        for table_name in table_names:\r\n            reader = client.do_get(flight.Ticket(table_name.encode()))\r\n            data = reader.read_all()\r\n            print(f\"Data from table {port}:: '{table_name}':\")\r\n            # print(data)\r\n#Movies\r\ndef client_reddit():\r\n    # port = 50051\r\n    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n\r\n    # table_name = 'FlattenedJSON_movies'\r\n    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n    # data = reader.read_all()\r\n\r\n    # # SELECTION\r\n    # # first level query\r\n    # ## to string\r\n    # print(data.select(['title']))\r\n    # ## to int\r\n    # print(data.select(['year']))\r\n    # ## object from list \r\n    # ### low level of nulls - first element of list\r\n    # print(data.select(['cast[0]']))\r\n    # ### medium level of nulls\r\n    # print(data.select(['cast[9]']))\r\n    # ### high level of nulls - last element of list\r\n    # print(data.select(['cast[58]']))\r\n\r\n    # # # FILTRES\r\n    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n\r\n    # # #SORT\r\n    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n    # # #SORT DESC\r\n    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n\r\n    # #GROUP BY\r\n    # print(pa.TableGroupBy(data,'year'))\r\n    # print(pa.TableGroupBy(data,'genres[0]'))\r\n    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']))\r\n    # print(pa.TableGroupBy(data,'cast[0]'))\r\n\r\n    # #AGGREGATE FUNCTION\r\n    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n    # print(pa.TableGroupBy(data, 'genres[0]').aggregate([('genres[0]', \"count\")]))\r\n    # print(pa.TableGroupBy(data, ['genres[0]','genres[1]']).aggregate([('genres[0]', \"count\"),('genres[1]', \"count\")]))\r\n\r\n\r\n    # combined_df = []\r\n    # for genre in filter(lambda x: ('genre' in x), data.schema.names):\r\n    #     print(genre)\r\n    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n    #     combined_df.append(df_genre)\r\n    \r\n    # combined_df = pa.concat_tables(combined_df)\r\n    # print(combined_df)\r\n    # combined_df = combined_df.combine_chunks()\r\n    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n\r\n    # port = 50054\r\n    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n    # table_name = 'SimpleMethod_movies'\r\n    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n    # data = reader.read_all()\r\n    \r\n    # # SELECTION\r\n    # # first level query\r\n    # ## to string\r\n    # print(data.select(['title']))\r\n    # ## to int\r\n    # print(data.select(['year']))\r\n    # ## object from list \r\n    # ### low level of nulls - first element of list\r\n    # print(data.select(['cast_0']))\r\n    # # ### medium level of nulls\r\n    # print(data.select(['cast_9']))\r\n    # # ### high level of nulls - last element of list\r\n    # print(data.select(['cast_58']))\r\n\r\n    # # # FILTRES\r\n    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n\r\n    # # #SORT\r\n    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n    # # #SORT DESC\r\n    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n\r\n    # #GROUP BY\r\n    # print(pa.TableGroupBy(data,'year'))\r\n    # print(pa.TableGroupBy(data,'genres_0'))\r\n    # print(pa.TableGroupBy(data, ['genres_0','genres_1']))\r\n    # print(pa.TableGroupBy(data,'cast_0'))\r\n\r\n    # #AGGREGATE FUNCTION\r\n    # print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n\r\n    # combined_df = []\r\n    # for genre in filter(lambda x: ('genres_' in x), data.schema.names):\r\n    #     df_genre = data.select([genre]).rename_columns(['genre'])\r\n    #     combined_df.append(df_genre)\r\n    \r\n    # combined_df = pa.concat_tables(combined_df)\r\n    # combined_df = combined_df.combine_chunks()\r\n    # print(pa.TableGroupBy(combined_df, ['genre']).aggregate([('genre', \"count\")]))\r\n\r\n    # port = 50053\r\n    # client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n    # table_name = 'TablesMethod_movies'\r\n    # reader = client.do_get(flight.Ticket(table_name.encode()))\r\n    # data = reader.read_all()\r\n\r\n    port = 50052\r\n    client = flight.FlightClient(f\"grpc+tcp://localhost:{port}\")\r\n    table_name = 'FlattenedJSON_movies'\r\n    reader = client.do_get(flight.Ticket(table_name.encode()))\r\n    data = reader.read_all()\r\n\r\n    # # SELECTION\r\n    # # first level query\r\n    # ## to string\r\n    # print(data.select(['title']))\r\n    # ## to int\r\n    # print(data.select(['year']))\r\n    # # object from list \r\n    # ### low level of nulls - first element of list\r\n    # cast_column=data['cast']\r\n    # cast_list = cast_column.to_pylist()\r\n    # first_elements = []\r\n    # for row in cast_list:\r\n    #     if row:  # Check if the list is not empty\r\n    #         first_elements.append(row[0])\r\n    #     else:\r\n    #         first_elements.append(None)\r\n    # first_elements_column = pa.array(first_elements)\r\n    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', first_elements_column)\r\n\r\n    # print(new_table.select(['cast']))\r\n    # # # ### medium level of nulls\r\n    # cast_column = data['cast']\r\n    # cast_list = cast_column.to_pylist()\r\n    # tenth_elements = []\r\n    # for row in cast_list:\r\n    #     if len(row) >= 10:\r\n    #         tenth_elements.append(row[9])\r\n    #     else:\r\n    #         tenth_elements.append(None)\r\n    # tenth_elements_column = pa.array(tenth_elements)\r\n    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n\r\n    # print(new_table.select(['cast']))\r\n    # # # ### high level of nulls - last element of list\r\n    # cast_column = data['cast']\r\n    # cast_list = cast_column.to_pylist()\r\n    # tenth_elements = []\r\n    # for row in cast_list:\r\n    #     if len(row) >= 59:\r\n    #         tenth_elements.append(row[58])\r\n    #     else:\r\n    #         tenth_elements.append(None)\r\n    # tenth_elements_column = pa.array(tenth_elements)\r\n    # new_table = data.set_column(data.schema.get_field_index('cast'), 'cast', tenth_elements_column)\r\n\r\n    # print(new_table.select(['cast']))\r\n\r\n    # # # # FILTRES\r\n    # print(pc.filter(data, pc.greater(data.column('year'), 2000)))\r\n\r\n    # # # #SORT\r\n    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"ascending\")])))\r\n    # # #SORT DESC\r\n    # print(pc.take(data,pc.sort_indices(data, sort_keys=[(\"title\", \"descending\")])))\r\n\r\n    # #GROUP BY\r\n    print(pa.TableGroupBy(data,'year'))\r\n\r\n    genres_column = data['genres']\r\n    first_genres  = [row[0] if row else None for row in genres_column]\r\n    first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n    grouped_table = first_genre_table.group_by('first_genre')\r\n    print(grouped_table)\r\n\r\n    genres_column = data['genres']\r\n    genres_0 = [row[0] if row else None for row in genres_column]\r\n    genres_1 = [row[1] if len(row) > 1 else None for row in genres_column]\r\n    group_table = pa.Table.from_arrays([genres_0, genres_1], names=['genres_0', 'genres_1'])\r\n    grouped_table = group_table.group_by(['genres_0', 'genres_1'])\r\n    print(grouped_table)\r\n\r\n    cast_column = data['cast']\r\n    first_cast  = [row[0] if row else None for row in cast_column]\r\n    first_cast_table = pa.Table.from_arrays([first_cast], names=['first_cast'])\r\n    grouped_table = first_cast_table.group_by('first_cast')\r\n    print(grouped_table)\r\n\r\n    # #AGGREGATE FUNCTION\r\n    print(pa.TableGroupBy(data,'year').aggregate([(\"year\", \"count\")]))\r\n    # print(pa.TableGroupBy(data, 'genres_0').aggregate([('genres_0', \"count\")]))\r\n    # print(pa.TableGroupBy(data, ['genres_0','genres_1']).aggregate([('genres_0', \"count\"),('genres_1', \"count\")]))\r\n    # genres_column = data['genres']\r\n    # first_genres = [row[0] if row else None for row in genres_column]\r\n    # first_genre_table = pa.Table.from_arrays([first_genres], names=['first_genre'])\r\n    # grouped_table = first_genre_table.group_by('first_genre').aggregate(     \r\n    #     count=pc.count,\r\n    # )\r\n    print(grouped_table)\r\n\r\n    print(pa.TableGroupBy(data,'genres').aggregate([(\"genres\", \"count\")]))\r\n\r\nif __name__ == '__main__':\r\n    # client_reddit()\r\n    # client_example()"
        }
    ]
}